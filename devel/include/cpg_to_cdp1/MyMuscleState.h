// Generated by gencpp from file cpg_to_cdp1/MyMuscleState.msg
// DO NOT EDIT!


#ifndef CPG_TO_CDP1_MESSAGE_MYMUSCLESTATE_H
#define CPG_TO_CDP1_MESSAGE_MYMUSCLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace cpg_to_cdp1
{
template <class ContainerAllocator>
struct MyMuscleState_
{
  typedef MyMuscleState_<ContainerAllocator> Type;

  MyMuscleState_()
    : name()
    , force(0.0)
    , length(0.0)
    , lengthening_speed(0.0)
    , path_points()  {
    }
  MyMuscleState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , force(0.0)
    , length(0.0)
    , lengthening_speed(0.0)
    , path_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _force_type;
  _force_type force;

   typedef float _length_type;
  _length_type length;

   typedef float _lengthening_speed_type;
  _lengthening_speed_type lengthening_speed;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _path_points_type;
  _path_points_type path_points;





  typedef boost::shared_ptr< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> const> ConstPtr;

}; // struct MyMuscleState_

typedef ::cpg_to_cdp1::MyMuscleState_<std::allocator<void> > MyMuscleState;

typedef boost::shared_ptr< ::cpg_to_cdp1::MyMuscleState > MyMuscleStatePtr;
typedef boost::shared_ptr< ::cpg_to_cdp1::MyMuscleState const> MyMuscleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator1> & lhs, const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.force == rhs.force &&
    lhs.length == rhs.length &&
    lhs.lengthening_speed == rhs.lengthening_speed &&
    lhs.path_points == rhs.path_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator1> & lhs, const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cpg_to_cdp1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5697b76bd7ab0565ec4ea37355d5a0b2";
  }

  static const char* value(const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5697b76bd7ab0565ULL;
  static const uint64_t static_value2 = 0xec4ea37355d5a0b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cpg_to_cdp1/MyMuscleState";
  }

  static const char* value(const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# muscle state\n"
"string name\n"
"float32 force\n"
"float32 length\n"
"float32 lengthening_speed\n"
"geometry_msgs/Vector3[] path_points\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.force);
      stream.next(m.length);
      stream.next(m.lengthening_speed);
      stream.next(m.path_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyMuscleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cpg_to_cdp1::MyMuscleState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "lengthening_speed: ";
    Printer<float>::stream(s, indent + "  ", v.lengthening_speed);
    s << indent << "path_points[]" << std::endl;
    for (size_t i = 0; i < v.path_points.size(); ++i)
    {
      s << indent << "  path_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.path_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CPG_TO_CDP1_MESSAGE_MYMUSCLESTATE_H
